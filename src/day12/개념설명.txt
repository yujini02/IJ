배열
- 한 번 생성하면 길이를 변경할 수 없다. (고정길이 데이터 구조)
- 더 많은 저장공간이 필요하다면 더 큰 길이의 배열을 새로 만들고 이전 배열의 항목들을 복사
- 배열 복사
- ENUM (열거타입)
- Calendar 클래스 활용 방법 숙지하기!

클래스
- 객체 지향 프로그래밍
- 객체 와 클래스
- 클래스 선언
- 객체 생성 과 클래스 변수
- 클래스의 구성멤버
- 필드 선언 과 사용
- 생성자 선언 과 호출 (생성자 오버로딩)
- 메소드 선언과 호출
- 패키지
- 접근제한자 (public > protected > default > private)
- Setter(), Getter() (public 이어야 함)
------------------------------------
필드(클래스에 정의된 멤버변수) 와 메소드  선언 방법에 따라서 인스턴스 멤버와 정적멤버 분류하여 선언한다.
- 인스턴스 멤버 : 객체 생성(new) 후 사용할 수 있다. (객체에 소속된 멤버)
- 정적 멤버 : 객체 생성 없이 사용할 수 있다. (클래스에 고정된 멤버 : static)
- final 필드 와 상수
- 싱글톤 패턴
- 빌더 패턴
------------------------------------
싱글톤(singleton) 패턴(pattern)이란 ? 애플리케이션 전체에서 단 한 객체만 생성해서 사용한다.
핵심은 생성자를 private 접근 제한해서 외부에서 new연산자로 생성자로 호출할 수 없도록 막는 방법.
privte 클래스(){}    -> new x

- 생성자를 호출할 수 가 없으니 외부에서 마음대로 객체를 생성이 불가능하다. 대신 싱글톤패턴이 제공하는 정적메소드를
  통해서 간접적으로 객체를 얻을 수 있게 한다.   Calendar.getInstance()

  패턴
  public class 클래스{

       private static 클래스 singleton = new 클래스();  // private 접근 권한을 갖는 정적필드 (singleton) 선언 및 초기화

       private 클래스(){}   //private 접근 권한을 갖는 생성자 선언 : 외부 객체 생성 불가

       public static 클래스 getInstance(){   //외부에서 객체를 얻는 유일한 방법은 getInstance()메소드를 호출하는 것이다.
          // 정적필드(singleton)값을 리턴하는 getInstance() 정적 메소드를 public 선언하여 외부에서 해당 객체를 간접적으로 얻을 수 있도록 만듬
       return singleton;
       }

  }

디자인패턴중에서 가장 개념이 간단한 패턴

- 왜 싱글톤패턴을 쓸까? 메모리 절약을 위해,  인스턴스가 필요할때 똑같은 인스턴스를 새로만들지 말고, 기존의 인스턴스를 가져와서 활용하는 기법이다.

- 어떨때 적용하면 좋을까? 그 객체가 리소스를 많이 차지하는 역할 , 무거운 클래스를 설계할때 적용
  (데이터베이스 연결 모듈, 디스크 연결, 네트워크 통신, DBCP 컨넥션 풀, 스레드 풀, 캐시 , 로그 기록 객체 운영)

싱글톤 패턴 구현 기법 종류
어떤목적 구현하기 위한 코드 : 가장 최적화된 패턴을 상황에 맞게 사용하는 것이 핵심
싱글톤 패턴을 구현할때 대표적인 코드 기법 7가지
1.Eager Initialization
 한번만 미리 만들어두는, 가장 직관적이면서도 심플한 기법 (Keep)
2.Static block initialization
 클래스가 로딩되고 클래스 변수가 준비된 후 자동으로 실행되는 블럭
 static { }
3.Lazy initialization
 객체 생성에 대한 관리를 내부적으로 처리
 메서드를 호출했을 때 인스턴스 변수의 null 유무에 따라 초기화 하거나 있는 걸 반환하는 기법
 Thread Safe 하지 않은 단점이 있다
4.Thread safe initialization
5.Double-Checked Locking (volatile)
6.Bill Pugh Solution (Lazy Holder)
 멀티쓰레드 환경에서 안전하고 Lazy Loading (나중에 객체 생성)
 클래스 안에 내부클래스(holder) 두어서 JVM클래스 로더 매커니즘과 클래스가 로드되는 시점에 이용하는 방법
7.Eum 이용

싱글톤의 문제점
1. 모듈간의 의존성이 높아진다.
2. S.O.L.I.D 원칙 : 객체지향 프로그래밍이 지향하는 원칙 - 찾아보기
3. TDD (테스트 주도 개발) 